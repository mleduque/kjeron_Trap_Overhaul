BACKUP ~weidu_backup\Trap_Overhaul~
AUTHOR ~none~
VERSION ~0.20-french~

ALWAYS
	LANGUAGE ~English~ ~english~ ~Trap_Overhaul/lang/english/setup.tra~
	LANGUAGE ~French~ ~french~  ~Trap_Overhaul/lang/english/setup.tra~ ~Trap_Overhaul/lang/french/setup.tra~

	DEFINE_DIMORPHIC_FUNCTION	I2H	INT_VAR	int = 0	pad = 0	RET	hex	BEGIN
		OUTER_PATCH_SAVE	hex ~00000000~	BEGIN	DEFINE_ARRAY	h	BEGIN	0 1 2 3 4 5 6 7 8 9 A B C D E F END
			FOR	(i = 7; i > 0; --i)	BEGIN	SET	h = int / (16 ** i)	WRITE_ASCIIE	(7 - i) $h(~%h%~) #1	END
			SET	h = int REM 16	WRITE_ASCIIE	7 $h(~%h%~) #1	REPLACE_TEXTUALLY	~^0+~ ~~	END
		OUTER_WHILE pad > STRING_LENGTH ~%hex%~	BEGIN	OUTER_SPRINT hex ~0%hex%~	END
	END
	DEFINE_DIMORPHIC_FUNCTION	H2I	STR_VAR	hex = ~~	RET	int	BEGIN	ACTION_TO_UPPER	hex
		OUTER_PATCH_SAVE	n ~%hex%~	BEGIN	REPLACE_TEXTUALLY	~0x~ ~~	DEFINE_ARRAY	h	BEGIN	0 1 2 3 4 5 6 7 8 9 END	SET	int = 0
			SET	$h(A) = 10	SET	$h(B) = 11	SET	$h(C) = 12	SET	$h(D) = 13	SET	$h(E) = 14	SET	$h(F) = 15	SET	l = STRING_LENGTH ~%BUFFER%~
			FOR	(i = l; i > 0; --i)	BEGIN	READ_ASCII	(i - 1) h (1)	SET	int += $h(~%h%~) * (16 ** (l - i))	END
		END
	END
	DEFINE_ACTION_FUNCTION	ADD_SPLSTATE	STR_VAR	label = ~~	new_ids = ~*~	s = EVAL ~ %TAB%~	w = EVAL ~ %TAB%%WNL%$~	RET	new_ids		BEGIN
		ACTION_MATCH	1	WITH	ANY (~%label%~ STR_EQ ~~)	BEGIN	FAIL	~Missing Spell State label~	END
			ANY	!(~%label%~ STRING_CONTAINS_REGEXP ~[ %TAB%%WNL%]~)	BEGIN	FAIL	~Spell State lable cannot have whitespace~	END
			ANY	FILE_CONTAINS_EVALUATED	(~SPLSTATE.IDS~	~^\(0x[0-9a-f]+\|[0-9]+\)[%s%]+%label%[%w%]~)	BEGIN
				COPY_EXISTING - ~SPLSTATE.IDS~	override	REPLACE_EVALUATE	~^\(0x[0-9a-f]+\|[0-9]+\)[%s%]%label%[%w%]~	BEGIN	SET	new_ids = MATCH1	END	~~	END
		DEFAULT
			COPY_EXISTING	~SPLSTATE.IDS~	override
				DEFINE_ARRAY	x	BEGIN	~~ 1 2 3 4 5 6 7 8 9 A B C D E F END	DEFINE_ARRAY	y	BEGIN	0 1 2 3 4 5 6 7 8 9 A B C D E F END
				FOR	(i = 0; i < 256; ++i)	BEGIN	LPF	I2H	INT_VAR	int = i	RET	hex	END	//	SET	x = i / 16	SET	y = i REM 16	SPRINT	h EVAL ~%x_%x%%%y_%y%%~
					PATCH_IF !FILE_CONTAINS_EVALUATED (~SPLSTATE.IDS~ ~^\(%i%\|0x0*%hex%\)[%s%]+[^%w%]+[%w%]~) BEGIN INSERT_2DA_ROW	i 2	~%i% %label%~	SET	new_ids = i	SET	i = 256	END
				END
				PATCH_IF	!IS_AN_INT new_ids	BEGIN	PATCH_FAIL	~No Spell States available~	END
			BUT_ONLY
		END
	END
	/// sub1 = monk trap evasion - Monks can bypass (without triggering) traps if their Find Traps skill is high enough to detect the trap.
	/// sub2 = fast detection     Any Monk/Thief/Shaman using "Detect Traps" modal with sufficient Find Traps skill will detect traps as soon as they are within detection range.
	/// sub3 = trap recovery     - Anytime a trap is disarmed, if the thief's Find Traps skill is at least 125% of the removal score then they will recover the trap
	/// sub4 = anyone unlocks    - clicking on a locked door or container, while close enough, will have the character attempt to unlock it with the Open Locks skill.
	DEFINE_ACTION_FUNCTION	~COMPONENT$$MAIN~	BEGIN	SILENT
		COPY_EXISTING	~ENGINEST.2DA~	override	SET_2DA_ENTRY 98 1 2 0	BUT_ONLY	IF_EXISTS
		APPEND	~EA.IDS~ ~127 AREA_OBJECT~ UNLESS ~127[ %TAB%]+AREA_OBJECT~
		DEFINE_PATCH_FUNCTION	GET_AREA_DATA	INT_VAR	section	= 0	RET	idx	RET_ARRAY	new	itemTrap	trapPRO BEGIN
			SET	$new(~?~) = 1	SET	$itemTrap(~?~) = 1	SET	$trapPRO(~?~) = 1
			PATCH_MATCH	section	WITH
				0	BEGIN	TEXT_SPRINT	sec_name ~Region~
					SET	$S(~#~) = 0x5a		SET	$S(~@~) = 0x5c		SET	$S(~$~) = 0xc4			SET	$O(type) = 0x20		SET	$O(hidden) = 0x60
					SET	$O(detect) = 0x68	SET	$O(remove) = 0x6a	SET	$O(traps) = 0x6c	SET	$O(script) = 0x7c	SET	$O(flags) = 0x60	SET	reset = 2	SET	$O(unlock) = 0	SET	lock = 0
					TEXT_SPRINT	match_trigger ~TR%LNL%76 0 0 0 0 "" "" OB~	//	Entered()
				END
				1	BEGIN	TEXT_SPRINT	sec_name ~Container~
					SET	$S(~#~) = 0x74		SET	$S(~@~) = 0x70		SET	$S(~$~) = 0xc0			SET	$O(type) = 0			SET	$O(hidden) = 0
					SET	$O(detect) = 0x2c	SET	$O(remove) = 0x2e	SET	$O(traps) = 0x30	SET	$O(script) = 0x48	SET	$O(flags) = 0x28	SET	reset = 8	SET	$O(unlock) = 0x26	SET	lock = BIT0
					TEXT_SPRINT	match_trigger ~TR%LNL%82 0 0 0 0 "" "" OB~	//	Opened()
				END
				2	BEGIN	TEXT_SPRINT	sec_name ~Door~
					SET	$S(~#~) = 0xa4		SET	$S(~@~) = 0xa8		SET	$S(~$~) = 0xc8			SET	$O(type) = 0			SET	$O(hidden) = 0x28
					SET	$O(detect) = 0x6c	SET	$O(remove) = 0x6e	SET	$O(traps) = 0x70	SET	$O(script) = 0x80	SET	$O(flags) = 0x28	SET	reset = 4	SET	$O(unlock) = 0x26	SET	lock = BIT1
					TEXT_SPRINT	match_trigger ~TR%LNL%82 0 0 0 0 "" "" OB~	//	Opened()
				END
				DEFAULT	SET	$S(~#~) = 0
			END
			PATCH_IF	$S(~#~)	BEGIN
				READ_SHORT	$S(~#~)	$S(~#~)	READ_LONG		$S(~@~)	$S(~@~)
				FOR	(i = 0; i < $S(~#~); ++i)	BEGIN
					TEXT_SPRINT spell_res ~~	SET	exists = 1
					PATCH_IF	$O(type)	BEGIN	SET	type = BYTE_AT ($S(~@~) + i * $S(~$~) + $O(type))	END	ELSE	BEGIN	SET	type = 0	END
					PATCH_IF	!type	BEGIN
						READ_ASCII	($S(~@~) + i * $S(~$~))	trap_name (0x20) NULL
						SET	hidden = 8	PATCH_IF	$O(hidden)	BEGIN	SET	hidden = LONG_AT	($S(~@~) + i * $S(~$~) + $O(hidden))	END
						SET	unlock = 0	PATCH_IF	$O(unlock)	BEGIN	SET	unlock = SHORT_AT	($S(~@~) + i * $S(~$~) + $O(unlock))	END
						READ_LONG	($S(~@~) + i * $S(~$~) + $O(flags))	flags
						READ_SHORT	($S(~@~) + i * $S(~$~) + $O(detect))	detect	SET	lore = detect / 2
						READ_SHORT	($S(~@~) + i * $S(~$~) + $O(remove))	remove 	SET	remove = remove * 5 / 4
						READ_SHORT	($S(~@~) + i * $S(~$~) + $O(traps))	traps
						READ_ASCII	($S(~@~) + i * $S(~$~) + $O(script))	file
						PATCH_IF	((hidden BAND 8) AND (detect != 100) AND traps AND (FILE_EXISTS_IN_GAME	~%file%.bcs~)
							AND FILE_CONTAINS_EVALUATED	(EVAL ~%file%.bcs~ ~%match_trigger%~))	BEGIN	SET	trapped = 1
						END	ELSE	BEGIN	SET	trapped = 0	END
						PATCH_IF	(flags BAND lock) AND (unlock != 100)	BEGIN	SET locked = 1	END	ELSE	BEGIN	SET	locked = 0	END
						PATCH_IF	section = 2	BEGIN	SET	unlock = 0	END
						PATCH_IF	section = 1	BEGIN	READ_ASCII	($S(~@~) + i * $S(~$~)) cont_name (20) NULL	END
						PATCH_IF	trapped OR locked BEGIN	//	Valid Trap and/or Lock
							PATCH_IF	trapped	BEGIN
								PATCH_IF	!VARIABLE_IS_SET	$new(~%section%~ ~%detect%~ ~%remove%~ ~%file%~)	BEGIN
									LPF	GET_UNIQUE_FILE_NAME	STR_VAR	extension = ~bcs~	base = $Trap_Lock_Overhaul(~%sec_name%~ ~%file%~ ~%detect%~ ~%remove%~)	RET bcsfile = filename	END
									TEXT_SPRINT	$new(~%section%~ ~%detect%~ ~%remove%~ ~%file%~) ~%bcsfile%~	SET	exists = 0
								END	TEXT_SPRINT	bcsfile $new(~%section%~ ~%detect%~ ~%remove%~ ~%file%~)
								WRITE_ASCIIE	($S(~@~) + i * $S(~$~) + $O(script))	$new(~%section%~ ~%detect%~ ~%remove%~ ~%file%~) #8
							END	ELSE	BEGIN
								PATCH_IF	!VARIABLE_IS_SET	$new(~%section%~ ~%file%~)	BEGIN
									LPF	GET_UNIQUE_FILE_NAME	STR_VAR	extension = ~bcs~	base = $Trap_Lock_Overhaul(~%sec_name%~ ~%file%~)	RET bcsfile = filename	END
									TEXT_SPRINT	$new(~%section%~ ~%file%~) ~%bcsfile%~	SET	exists = 0
								END	TEXT_SPRINT bcsfile $new(~%section%~ ~%file%~)
								WRITE_ASCIIE	($S(~@~) + i * $S(~$~) + $O(script))	$new(~%section%~ ~%file%~) #8
							END
							PATCH_IF	exists AND sub4 AND locked AND section = 1 AND !FILE_CONTAINS_EVALUATED (EVAL ~%bcsfile%.bcs~ ~"%cont_name%"~)	BEGIN
								INNER_ACTION	BEGIN
									EXTEND_TOP ~%bcsfile%.bcs~ ~.../inlined_unlock_cont.baf~ EVALUATE_BUFFER	EVALUATE_BUFFER
								END
							END
							PATCH_IF	!exists	BEGIN
								INNER_ACTION	BEGIN
									ACTION_IF	(!FILE_EXISTS_IN_GAME	~%file%.bcs~) OR (~%file%~ STR_EQ ~~)	BEGIN	COPY	~.../inlined.bcs~	~override\%bcsfile%.bcs~	END
									COPY_EXISTING	~%bcsfile%.bcs~	override	~%file%.bcs~	~override\%bcsfile%.bcs~
										PATCH_IF	trapped	BEGIN
											DECOMPILE_AND_PATCH	BEGIN
												PATCH_IF	sub1 = 1 AND !section	BEGIN
													REFACTOR_TRIGGER	~Entered(\[ANYONE\])~	~Entered([ANYONE])%WNL%OR(2)%WNL%CheckStatLT(LastTrigger,%detect%,TRAPS)%WNL%!Class(LastTrigger,MONK)~
												END
												SET	spell = INDEX_BUFFER	(CASE_SENSITIVE	~[ %TAB%^]\(ReallyForce\|Force\|Apply\)?Spell\(NoDec\|Dead\)?\(Point\)? ?(.+,~)
												PATCH_IF	spell = ~-1~	BEGIN
													SET	spell = INDEX_BUFFER	(CASE_SENSITIVE	~[ %TAB%^]\(ReallyForce\|Force\|Apply\)?Spell\(NoDec\|Dead\)?\(Point\)?RES ?(~)
												END
												PATCH_IF	spell != ~-1~	BEGIN		SET	start	= INDEX_BUFFER	( ~,~ spell)
													PATCH_IF	start != ~-1~	BEGIN		SET	end	= INDEX_BUFFER	( ~)~ start)
														PATCH_IF	end != ~-1~	BEGIN	READ_ASCII	(start + 1) label (end - start - 1)
															PATCH_IF	FILE_CONTAINS_EVALUATED (~SPELL.IDS~	~[ %TAB%]%label%[ %TAB%%WNL%$]~)	BEGIN
																LPF	RES_NUM_OF_SPELL_NAME	STR_VAR	spell_name = EVAL ~%label%~	RET	spell_res	END	TO_UPPER	spell_res
															END	ELSE	BEGIN
																INNER_PATCH_SAVE	spell_res	~%label%~	BEGIN	REPLACE_TEXTUALLY	~"~	~~	END	TO_UPPER	spell_res
															END
														END
													END
												END
											END
										END
									IF_EXISTS
									ACTION_IF	locked	BEGIN
										ACTION_IF	sub4 AND section = 1	BEGIN	EXTEND_TOP ~%bcsfile%.bcs~ ~.../inlined_unlock_cont.baf~ EVALUATE_BUFFER	EVALUATE_BUFFER	END
										ACTION_IF	sub4 AND section = 2	BEGIN	EXTEND_TOP ~%bcsfile%.bcs~ ~.../inlined_unlock_door.baf~ EVALUATE_BUFFER	EVALUATE_BUFFER	END
									END
									ACTION_IF	!(~%spell_res%~ STR_EQ ~~) AND trapped	BEGIN
										ACTION_IF	FILE_EXISTS_IN_GAME	~%spell_res%.spl~	BEGIN
											ACTION_IF sub3 = 1	BEGIN
												ACTION_IF	!VARIABLE_IS_SET	$itemTrap(~%spell_res%~)	BEGIN
													LAF	GET_UNIQUE_FILE_NAME	STR_VAR	extension = ~itm~	base = $Recoverable_Trap(~%spell_res%~)	RET itm = filename	END
													LAF	GET_UNIQUE_FILE_NAME	STR_VAR	extension = ~spl~	base = $Recoverable_Trap(~%spell_res%~)	RET spl = filename	END
													LAF	GET_UNIQUE_FILE_NAME	STR_VAR	extension = ~pro~	base = $Recoverable_Trap(~%spell_res%~)	RET pro = filename	END
												END	ELSE	BEGIN
													OUTER_SPRINT	itm $itemTrap(~%spell_res%~)
												END
											END
											OUTER_PATCH	~%spell_res%~	BEGIN
												READ_ASCII	0	res	ELSE	~~	(4)
												READ_ASCII	4 id	ELSE	~~	(3)
												PATCH_MATCH	id	WITH
													984 989 WHEN ~%res%~ STR_EQ ~SPPR~ AND GAME_IS ~iwdee~	//	IWDEE versions
														BEGIN	SET	name = id * 10 + 10002	SET	desc = name + 1	END
													901	982	983 984 985 986 987 988 989	WHEN ~%res%~ STR_EQ ~SPPR~
														BEGIN	SET	name = id * 10 + 10000	SET	desc = name + 1	END
													06 09 12 13 18 28 29 30 31 32 33 34 35 WHEN ~%res%~ STR_EQ ~SPWI~ AND GAME_IS ~iwdee~	//	IWDEE versions
														BEGIN	SET	name = id * 10 + 20002	SET	desc = name + 1	END
													00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 934 950 WHEN ~%res%~ STR_EQ ~SPWI~
														BEGIN	SET	name = id * 10 + 20000	SET	desc = name + 1	END
													683 706	707 708 709 865	WHEN ~%res%~ STR_EQ ~SPIN~
														BEGIN	SET	name = id * 10 + 30000	SET	desc = name + 1	END
												DEFAULT
													INNER_ACTION	BEGIN
														OUTER_SET	name = 1001	OUTER_SET	desc = 1002
														COPY_EXISTING	~%spell_res%.spl~	override
															READ_STRREF NAME1 name_ref	ELSE ~%unknown%~
															READ_STRREF UNIDENTIFIED_DESC desc_ref	ELSE ~~
															PATCH_IF	~%name_ref%~ STR_EQ ~<Invalid Strref -1>~	BEGIN	TEXT_SPRINT	name_ref ~%unknown%~	END
															PATCH_IF	~%desc_ref%~ STR_EQ ~<Invalid Strref -1>~	BEGIN	TEXT_SPRINT	desc_ref ~~	END
														BUT_ONLY
													END
												END
												SET	name = RESOLVE_STR_REF ((AT name))
												SET	desc = RESOLVE_STR_REF ((AT desc))
											END
											ACTION_IF	sub2	BEGIN
												EXTEND_TOP ~%bcsfile%.bcs~ ~.../inlined_detect_UN.baf~ EVALUATE_BUFFER	EVALUATE_BUFFER
												EXTEND_TOP ~%bcsfile%.bcs~ ~.../inlined_detect_ID.baf~ EVALUATE_BUFFER	EVALUATE_BUFFER
												ACTION_IF	!sub3 BEGIN	EXTEND_TOP ~%bcsfile%.bcs~ ~.../inlined_disarm_none.baf~ EVALUATE_BUFFER	EVALUATE_BUFFER	END
											END
											ACTION_IF sub3	BEGIN
												ACTION_IF	!sub2	BEGIN	EXTEND_TOP ~%bcsfile%.bcs~ ~.../inlined_disarm_none.baf~ EVALUATE_BUFFER	EVALUATE_BUFFER	END
												EXTEND_TOP ~%bcsfile%.bcs~ ~.../inlined_disarm_item.baf~ EVALUATE_BUFFER	EVALUATE_BUFFER
												COPY_EXISTING	- ~%spell_res%.spl~	override	READ_SHORT	0x98	proj	IF_EXISTS
												ACTION_MATCH	proj	WITH	81 82 83 84 85 86 87 88 89 90 91	BEGIN	OUTER_SET	proj = 23	END	DEFAULT	END
												ACTION_IF	!VARIABLE_IS_SET	$itemTrap(~%spell_res%~)	BEGIN
													OUTER_SPRINT	$itemTrap(~%spell_res%~)	~%itm%~
													ACTION_IF	!VARIABLE_IS_SET	$trapPRO(~%proj%~)	BEGIN
														ACTION_GET_STRREF name missile_label
														APPEND	~PROJECTL.IDS~	~%idx% %pro%~	OUTER_SET	idx += 1
														APPEND	~MISSILE.IDS~		~%idx% %missile_label%~
														COPY	~.../inlined.pro~	~override\%pro%.pro~	EVALUATE_BUFFER	WRITE_SHORT	0x21a	proj
														OUTER_SET	$trapPRO(~%proj%~) = idx
													END
													COPY	~.../inlined.itm~	~override\%itm%.itm~	EVALUATE_BUFFER
														SAY	NAME1	@1000
														WRITE_LONG	NAME2	name
														SAY	DESC	@1004
														WRITE_LONG	IDENTIFIED_DESC	desc
														LPF	ADD_ITEM_EFFECT	INT_VAR	type = 1	opcode = 252	target = 1	parameter2 = 1	STR_VAR	resource = EVAL ~%spl%~	END
														LPF	ADD_ITEM_EFFECT	INT_VAR	type = 1	opcode = 215	target = 1	parameter2 = 2	timing = 1	STR_VAR	resource = ~SPTRAPBB~	END
													//
													COPY_EXISTING	~%spell_res%.SPL~	~override\%spl%.spl~
														WRITE_LONG	NAME1	~-1~
														WRITE_LONG	UNIDENTIFIED_DESC	~-1~
														WRITE_SHORT	0x1c	4
														LPF	ALTER_SPELL_HEADER	INT_VAR	projectile = $trapPRO(~%proj%~)	END
														LPF	CLONE_EFFECT	INT_VAR	silent = 1	match_opcode = 321	STR_VAR	match_resource = $SOURCE(RES)	resource = $DEST(RES)	END
														LPF	CLONE_EFFECT	INT_VAR	silent = 1	match_opcode = 206	STR_VAR	match_resource = $SOURCE(RES)	resource = $DEST(RES)	END
														LPF	ALTER_EFFECT	INT_VAR	silent = 1	match_opcode = 318	STR_VAR	match_resource = $SOURCE(RES)	resource = $DEST(RES)	END
														LPF	ALTER_EFFECT	INT_VAR	silent = 1	match_opcode = 324	STR_VAR	match_resource = $SOURCE(RES)	resource = $DEST(RES)	END
													//
													COPY_EXISTING	~%spell_res%.SPL~	~override\%spl%F.spl~
														WRITE_LONG	NAME1	~-1~
														WRITE_LONG	UNIDENTIFIED_DESC	~-1~
														WRITE_SHORT	0x1c	4
														LPF	CLONE_EFFECT	INT_VAR	silent = 1	match_opcode = 321	STR_VAR	match_resource = $SOURCE(RES)	resource = $DEST(RES)	END
														LPF	CLONE_EFFECT	INT_VAR	silent = 1	match_opcode = 206	STR_VAR	match_resource = $SOURCE(RES)	resource = $DEST(RES)	END
														LPF	ALTER_EFFECT	INT_VAR	silent = 1	match_opcode = 318	STR_VAR	match_resource = $SOURCE(RES)	resource = $DEST(RES)	END
														LPF	ALTER_EFFECT	INT_VAR	silent = 1	match_opcode = 324	STR_VAR	match_resource = $SOURCE(RES)	resource = $DEST(RES)	END
													//
												END
											END
										END
									END
								END
							END
						END
					END
				END
			END
		END
		<<<<<<<< .../inlined.pro
%pro_data%>>>>>>>>
		OUTER_PATCH_SAVE	pro_data ~~	BEGIN
			INSERT_BYTES	0	0x300
			WRITE_ASCII	0	~PRO V1.0~
			WRITE_SHORT	0x8	3
			WRITE_SHORT	0xa	40
			WRITE_LONG	0xc	(BIT2 + BIT5 + BIT6)
			WRITE_LONG	0x100	BIT3
			WRITE_ASCII	0x104	~TRAPGR~
			WRITE_BYTE	0x133	1
			WRITE_SHORT	0x200	(BIT0 + BIT2 + BIT6 + BIT15)
			WRITE_SHORT	0x204	64
			WRITE_SHORT	0x206	80
			WRITE_SHORT	0x210 1
			WRITE_BYTE	0x216	1
			WRITE_BYTE	0x217	~-1~
			WRITE_SHORT	0x21a	1
		END
		<<<<<<<< .../inlined.spl
%spl_data%>>>>>>>>
		OUTER_PATCH_SAVE	spl_data ~~	BEGIN
			INSERT_BYTES	0	0xca
			WRITE_ASCII	0	~SPL V1  ~
			WRITE_LONG	0x8	~-1~
			WRITE_LONG	0xc	~-1~
			WRITE_LONG	0x34	1
			WRITE_LONG	0x64	0x72
			WRITE_SHORT	0x68	1
			WRITE_LONG	0x6a	0x9a
			WRITE_SHORT	0x82	1
			WRITE_SHORT	0x90	1
			WRITE_SHORT	0x98	1
			WRITE_SHORT	0x9a	150
			WRITE_BYTE	0x9c	1
			WRITE_LONG	0xa6	1
			WRITE_BYTE	0xac	100
		END
		<<<<<<<< .../inlined.itm
%itm_data%>>>>>>>>
		OUTER_PATCH_SAVE	itm_data ~~	BEGIN
			INSERT_BYTES	0	0xaa
			WRITE_ASCII	0	~ITM V1  ~
			WRITE_LONG	0x8	~-1~
			WRITE_LONG	0xc	~-1~
			WRITE_LONG	0x18	(BIT2 + BIT3 + BIT5)
			WRITE_LONG	0x34	100
			WRITE_SHORT	0x38	10
			WRITE_ASCII	0x3a	~TRAPGR~
			WRITE_SHORT	0x42	15
			WRITE_ASCII	0x44	~GTREAS01~
			WRITE_ASCII	0x58	~CMISC09~
			WRITE_LONG	0x64	0x72
			WRITE_SHORT	0x68	1
			WRITE_LONG	0x6a	0xaa
			WRITE_BYTE	0x72	1
			WRITE_BYTE	0x74	3
			WRITE_ASCII	0x76	~SPCL412B~
			WRITE_BYTE	0x7e	4
			WRITE_SHORT	0x80	1
			WRITE_SHORT	0x94	1
			WRITE_SHORT	0x96	1
			WRITE_SHORT	0x9c	1
		END
		COPY_EXISTING	- ~PROJECTL.IDS~	override	READ_2DA_ENTRIES_NOW	PROJECTL	2	SET	idx = 0
			FOR	(i = 1; i < PROJECTL; ++i)	BEGIN	SET	idx = ($PROJECTL(~%i%~ ~0~) > idx ?	$PROJECTL(~%i%~ ~0~) : idx)	END	SET	idx += 1
		IF_EXISTS
		LAF	GET_UNIQUE_FILE_NAME	STR_VAR	extension = ~spl~	base = EVAL ~Detectable_Trap_Detect~	RET SPL_TRAP = filename	END
		LAF	GET_UNIQUE_FILE_NAME	STR_VAR	extension = ~itm~	base = EVAL ~Detectable_Trap_Detect~	RET ITM_TRAP = filename	END
		LAF	GET_UNIQUE_FILE_NAME	STR_VAR	extension = ~pro~	base = EVAL ~Detectable_Trap_Detect~	RET PRO_TRAP = filename	END
		ACTION_IF	IDS_OF_SYMBOL (~SPELL~ ~CLERIC_FIND_TRAPS~) != ~-1~	BEGIN
			LAF	ADD_SPLSTATE	STR_VAR	label = ~FIND_TRAPS~	RET	FIND_TRAPS = new_ids	END
			LAF	RES_NUM_OF_SPELL_NAME	STR_VAR	spell_name = ~CLERIC_FIND_TRAPS~	RET	spell_res	END
			COPY_EXISTING	~%spell_res%.SPL~	override
				LPF	CLONE_EFFECT	INT_VAR	silent = 1	match_opcode = 174	opcode = 328	parameter2 = FIND_TRAPS	match_timing = 4	timing = 0	special = 1	STR_VAR	resource = ~~	END
				LPF	CLONE_EFFECT	INT_VAR	silent = 1	match_opcode = 142	opcode = 328	parameter2 = FIND_TRAPS	special = 1	STR_VAR	resource = ~~	END
			BUT_ONLY	IF_EXISTS
		END
		COPY	~.../inlined.spl~	~override\%SPL_TRAP%.spl~	EVALUATE_BUFFER
		<<<<<<<< .../inlined.bcs
		>>>>>>>>
		<<<<<<<< .../inlined_disarm_item.baf
			IF
				Disarmed([ANYONE])
				!CheckStatLT(LastTrigger,%remove%,TRAPS)
			THEN
				RESPONSE #100
					TriggerActivation(Myself,FALSE)
					GiveItemCreate("%itm%",LastTrigger,1,0,0)
			END
			IF
				Disarmed([ANYONE])
				CheckStatLT(LastTrigger,%remove%,TRAPS)
			THEN
				RESPONSE #100
					TriggerActivation(Myself,FALSE)
			END
		>>>>>>>>
		<<<<<<<< .../inlined_disarm_none.baf
			IF
				Disarmed([ANYONE])
			THEN
				RESPONSE #100
					TriggerActivation(Myself,FALSE)
			END
		>>>>>>>>
		OUTER_SPRINT	detect_ID_string
		~~~~~
			IF
				Detect(%target%)
				OR(2)
					!CheckStatLT(LastSeenBy,%detect%,TRAPS)
					CheckSpellState(LastSeenBy,FIND_TRAPS)
				OR(2)
					CheckSpellState(LastSeenBy,FIND_TRAPS)
					TriggerOverride(LastSeenBy,ModalState(DETECTTRAPS))
				OR(2)
					CheckSpellState(LastSeenBy,FIND_TRAPS)
					!StateCheck(LastSeenBy,STATE_BLIND)
				Range(LastSeenBy,15)
				!CheckStatLT(LastSeenBy,%lore%,LORE)
				ActionListEmpty()
			THEN
				RESPONSE #100
					DisplayStringHeadNoLog(Myself,%name%)
					ReallyForceSpellRES("%SPL_TRAP%",Myself)
					Continue()
			END
		~~~~~
		OUTER_SPRINT	detect_UN_string
		~~~~~
			IF
				Detect(%target%)
				OR(2)
					!CheckStatLT(LastSeenBy,%detect%,TRAPS)
					CheckSpellState(LastSeenBy,FIND_TRAPS)
				OR(2)
					CheckSpellState(LastSeenBy,FIND_TRAPS)
					TriggerOverride(LastSeenBy,ModalState(DETECTTRAPS))
				OR(2)
					CheckSpellState(LastSeenBy,FIND_TRAPS)
					!StateCheck(LastSeenBy,STATE_BLIND)
				Range(LastSeenBy,15)
				!CheckStatLT(LastSeenBy,%lore%,LORE)
				ActionListEmpty()
			THEN
				RESPONSE #100
					DisplayStringHeadNoLog(Myself,@1000)
					ReallyForceSpellRES("%SPL_TRAP%",Myself)
					Continue()
			END
		~~~~~
		OUTER_SPRINT	detect_ID	~~	OUTER_SPRINT	detect_UN	~~
		ACTION_FOR_EACH	target IN ~[GOODCUTOFF]~ ~NearestAllyOf([GOODCUTOFF])~ ~SecondNearestAllyOf([GOODCUTOFF])~ ~ThirdNearestAllyOf([GOODCUTOFF])~
			~FourthNearestAllyOf([GOODCUTOFF])~ ~FifthNearestAllyOf([GOODCUTOFF])~ ~SixthNearestAllyOf([GOODCUTOFF])~ ~SeventhNearestAllyOf([GOODCUTOFF])~
			~EighthNearestAllyOf([GOODCUTOFF])~ ~NinthNearestAllyOf([GOODCUTOFF])~ ~TenthNearestAllyOf([GOODCUTOFF])~	BEGIN
			OUTER_PATCH_SAVE	text_ID ~%detect_ID_string%~	BEGIN	EVALUATE_BUFFER	END	OUTER_SPRINT	detect_ID ~%detect_ID%%text_ID%~
			OUTER_PATCH_SAVE	text_UN ~%detect_UN_string%~	BEGIN	EVALUATE_BUFFER	END	OUTER_SPRINT	detect_UN ~%detect_UN%%text_UN%~
		END
		<<<<<<<< .../inlined_detect_ID.baf
			%detect_ID%
		>>>>>>>>
		<<<<<<<< .../inlined_detect_UN.baf
			%detect_UN%
		>>>>>>>>
		<<<<<<<< .../inlined_unlock_door.baf
			IF
				Clicked([ANYONE])
				ObjectActionListEmpty(LastTrigger)
			THEN
				RESPONSE #100
					ActionOverride(LastTrigger,PickLock([127]))
					Continue()
			END
		>>>>>>>>
		<<<<<<<< .../inlined_unlock_cont.baf
			IF
				Name("%cont_name%",Myself)
				Clicked([ANYONE])
				ObjectActionListEmpty(LastTrigger)
				Range(LastTrigger,4)
			THEN
				RESPONSE #100
					ActionOverride(LastTrigger,PickLock("%cont_name%"))
					Continue()
			END
		>>>>>>>>
		OUTER_SPRINT	unknown @1003
		COPY_EXISTING_REGEXP	~^.+\.ARE$~	override
			TEXT_SPRINT	area_name	~%SOURCE_RES%~	PATCH_PRINT	~ Processing: %SOURCE_RES%.ARE~	PATCH_SILENT
			FOR	(section = 0; section < 3; ++section)	BEGIN
				LPF	GET_AREA_DATA	INT_VAR	section	RET	idx	RET_ARRAY	new	itemTrap	trapPRO	END
			END
		BUT_ONLY
	END
END

BEGIN	@1
DESIGNATED	1111
SUBCOMPONENT	@0
LABEL	~TRAP_OVERHAUL_MONK_FAST_RECOVERY_LOCK~
	LAF	~COMPONENT$$MAIN~	INT_VAR	sub1 = 1	sub2 = 1	sub3 = 1	sub4 = 1
END

BEGIN	@2
DESIGNATED	1110
SUBCOMPONENT	@0
LABEL	~TRAP_OVERHAUL_MONK_FAST_LOCK~
	LAF	~COMPONENT$$MAIN~	INT_VAR	sub1 = 1	sub2 = 1	sub3 = 0	sub4 = 1
END

BEGIN	@3
DESIGNATED	1101
SUBCOMPONENT	@0
LABEL	~TRAP_OVERHAUL_MONK_RECOVERY_LOCK~
	LAF	~COMPONENT$$MAIN~	INT_VAR	sub1 = 1	sub2 = 0	sub3 = 1	sub4 = 1
END

BEGIN	@4
DESIGNATED	1011
SUBCOMPONENT	@0
LABEL	~TRAP_OVERHAUL_FAST_RECOVERY_LOCK~
	LAF	~COMPONENT$$MAIN~	INT_VAR	sub1 = 0	sub2 = 1	sub3 = 1	sub4 = 1
END

BEGIN	@5
DESIGNATED	1100
SUBCOMPONENT	@0
LABEL	~TRAP_OVERHAUL_MONK_LOCK~
	LAF	~COMPONENT$$MAIN~	INT_VAR	sub1 = 1	sub2 = 0	sub3 = 0	sub4 = 1
END
BEGIN	@6
DESIGNATED	1010
SUBCOMPONENT	@0
LABEL	~TRAP_OVERHAUL_FAST_LOCK~
	LAF	~COMPONENT$$MAIN~	INT_VAR	sub1 = 0	sub2 = 1	sub3 = 0	sub4 = 1
END
BEGIN	@7
DESIGNATED	1001
SUBCOMPONENT	@0
LABEL	~TRAP_OVERHAUL_RECOVERY_LOCK~
	LAF	~COMPONENT$$MAIN~	INT_VAR	sub1 = 0	sub2 = 0	sub3 = 1	sub4 = 1
END
BEGIN	@8
DESIGNATED	1000
SUBCOMPONENT	@0
LABEL	~TRAP_OVERHAUL_LOCK~
	LAF	~COMPONENT$$MAIN~	INT_VAR	sub1 = 0	sub2 = 0	sub3 = 0	sub4 = 1
END
BEGIN	@9
DESIGNATED	0111
SUBCOMPONENT	@0
LABEL	~TRAP_OVERHAUL_MONK_FAST_RECOVERY~
	LAF	~COMPONENT$$MAIN~	INT_VAR	sub1 = 1	sub2 = 1	sub3 = 1	sub4 = 0
END
BEGIN	@10
DESIGNATED	0110
SUBCOMPONENT	@0
LABEL	~TRAP_OVERHAUL_MONK_FAST~
	LAF	~COMPONENT$$MAIN~	INT_VAR	sub1 = 1	sub2 = 1	sub3 = 0	sub4 = 0
END
BEGIN	@11
DESIGNATED	0101
SUBCOMPONENT	@0
LABEL	~TRAP_OVERHAUL_MONK_RECOVERY~
	LAF	~COMPONENT$$MAIN~	INT_VAR	sub1 = 1	sub2 = 0	sub3 = 1	sub4 = 0
END
BEGIN	@12
DESIGNATED	0011
SUBCOMPONENT	@0
LABEL	~TRAP_OVERHAUL_FAST_RECOVERY~
	LAF	~COMPONENT$$MAIN~	INT_VAR	sub1 = 0	sub2 = 1	sub3 = 1	sub4 = 0
END
BEGIN	@13
DESIGNATED	0100
SUBCOMPONENT	@0
LABEL	~TRAP_OVERHAUL_MONK~
	LAF	~COMPONENT$$MAIN~	INT_VAR	sub1 = 1	sub2 = 0	sub3 = 0	sub4 = 0
END
BEGIN	@14
DESIGNATED	0010	SUBCOMPONENT	@0
LABEL	~TRAP_OVERHAUL_FAST~
	LAF	~COMPONENT$$MAIN~	INT_VAR	sub1 = 0	sub2 = 1	sub3 = 0	sub4 = 0
END
BEGIN	@15
DESIGNATED	0001	SUBCOMPONENT	@0
LABEL	~TRAP_OVERHAUL_RECOVERY~
	LAF	~COMPONENT$$MAIN~	INT_VAR	sub1 = 0	sub2 = 0	sub3 = 1	sub4 = 0
END

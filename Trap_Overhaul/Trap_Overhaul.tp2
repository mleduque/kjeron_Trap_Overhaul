	BACKUP ~Trap_Overhaul\backup~ 
	AUTHOR ~none~ 
	VERSION ~0.15~
	
	ALWAYS
		DEFINE_ACTION_FUNCTION	ADD_SPLSTATE	STR_VAR	label = ~~		RET	new_ids		BEGIN
			ACTION_IF	(~%label%~ STRING_EQUAL ~~)	BEGIN	WARN	~Missing Spell State label~	END	ELSE	BEGIN
				ACTION_IF	((~%label%~ STRING_CONTAINS_REGEXP ~ ~) = 0)	BEGIN	WARN	~Spell State lable cannot have spaces~	END	ELSE	BEGIN
					ACTION_IF	FILE_CONTAINS_EVALUATED	(~SPLSTATE.IDS~	~^[0-9]+[ %TAB%]+%label%[ %TAB%%WNL%$]~)	BEGIN
						COPY_EXISTING - ~SPLSTATE.IDS~	override	REPLACE_EVALUATE	~^\([0-9]+\)[ %TAB%]%label%[ %TAB%%WNL%$]~	BEGIN	SET	new_ids = MATCH1	END	~~
					END	ELSE	BEGIN
						OUTER_FOR	(i = 0; i < 256; ++i)	BEGIN
							ACTION_IF	!FILE_CONTAINS_EVALUATED	(~SPLSTATE.IDS~	~^%i%[ %TAB%]+[^ %TAB%%WNL%$]+[ %TAB%%WNL%$]~)	BEGIN
								APPEND	~SPLSTATE.IDS~	~%i%	%label%~
								OUTER_SET	new_ids = i
								OUTER_SET	i = 300
							END
						END
						ACTION_IF	i = 256	BEGIN	FAIL	~No available Spell States~	END
					END
				END
			END
		END
		DEFINE_ACTION_FUNCTION	MAIN	BEGIN
			OUTER_SET	idx = 0
			COPY_EXISTING	~PROJECTL.IDS~	override
				READ_2DA_ENTRIES_NOW	~projids~	2
				FOR	(i = 1; i < projids; ++i)	BEGIN
					READ_2DA_ENTRY_FORMER	~projids~ i 0 next
					PATCH_IF	next > idx	BEGIN
						SET	idx = next
					END
				END
				SET	idx += 1
			BUT_ONLY
			LAF	GET_UNIQUE_FILE_NAME	STR_VAR	extension = ~spl~	base = EVAL ~Detectable_Trap_Detect~	RET trapspl = filename	END
			LAF	GET_UNIQUE_FILE_NAME	STR_VAR	extension = ~itm~	base = EVAL ~Detectable_Trap_Detect~	RET trapspl = filename	END
			LAF	GET_UNIQUE_FILE_NAME	STR_VAR	extension = ~pro~	base = EVAL ~Detectable_Trap_Detect~	RET trapspl = filename	END
			LAF	ADD_SPLSTATE	STR_VAR	label = ~FIND_TRAPS~	RET	FIND_TRAPS = new_ids	END
			COPY_EXISTING	~SPPR205.SPL~	override
				LPF	CLONE_EFFECT	INT_VAR	silent = 1	match_opcode = 174	opcode = 328	parameter2 = FIND_TRAPS	match_timing = 4	timing = 0	special = 1	STR_VAR	resource = ~~	END
				LPF	CLONE_EFFECT	INT_VAR	silent = 1	match_opcode = 142	opcode = 328	parameter2 = FIND_TRAPS	special = 1	STR_VAR	resource = ~~	END
			BUT_ONLY	IF_EXISTS
			COPY	~%MOD_FOLDER%\TRAP.SPL~	~override\%trapspl%.spl~
<<<<<<<< .../inlined_temp_script_sub2.baf
IF
	OR(3)
		Detect([GOODCUTOFF.0.0.THIEF_ALL])
		Detect([GOODCUTOFF.0.0.MONK])
		Detect([GOODCUTOFF.0.0.SHAMAN])
		Range(LastSeenBy,15)
	!StateCheck(LastSeenBy,STATE_BLIND)
	!CheckStatLT(LastSeenBy,%detect%,TRAPS)
	!CheckStatLT(LastSeenBy,%lore%,LORE)
	TriggerOverride(LastSeenBy,ModalState(DETECTTRAPS))
	!GlobalTimerNotExpired("%trap_name%","MYAREA")
	ActionListEmpty()
THEN
	RESPONSE #100
		DisplayStringHead(Myself,%name%)
		ReallyForceSpellRES("%trapspl%",Myself)
		SetGlobalTimer("%trap_name%","MYAREA",12)
END
IF
	OR(3)
		Detect([GOODCUTOFF.0.0.THIEF_ALL])
		Detect([GOODCUTOFF.0.0.MONK])
		Detect([GOODCUTOFF.0.0.SHAMAN])
		Range(LastSeenBy,15)
	!StateCheck(LastSeenBy,STATE_BLIND)
	!CheckStatLT(LastSeenBy,%detect%,TRAPS)
	CheckStatLT(LastSeenBy,%lore%,LORE)
	TriggerOverride(LastSeenBy,ModalState(DETECTTRAPS))
	!GlobalTimerNotExpired("%trap_name%","MYAREA")
	ActionListEmpty()
THEN
	RESPONSE #100
		DisplayStringHead(Myself,@1000)
		ReallyForceSpellRES("%trapspl%",Myself)
		SetGlobalTimer("%trap_name%","MYAREA",12)
END
IF
	Detect([GOODCUTOFF])
	Range(LastSeenBy,15)
	CheckSpellState(LastSeenBy,%FIND_TRAPS%)
	!CheckStatLT(LastSeenBy,%lore%,LORE)
	!GlobalTimerNotExpired("%trap_name%","MYAREA")
	ActionListEmpty()
THEN
	RESPONSE #100
		DisplayStringHead(Myself,%name%)
		ReallyForceSpellRES("%trapspl%",Myself)
		SetGlobalTimer("%trap_name%","MYAREA",12)
END
IF
	Detect([GOODCUTOFF])
	Range(LastSeenBy,15)
	CheckSpellState(LastSeenBy,%FIND_TRAPS%)
	CheckStatLT(LastSeenBy,%lore%,LORE)
	!GlobalTimerNotExpired("%trap_name%","MYAREA")
	ActionListEmpty()
THEN
	RESPONSE #100
		DisplayStringHead(Myself,@1000)
		ReallyForceSpellRES("%trapspl%",Myself)
		SetGlobalTimer("%trap_name%","MYAREA",12)
END
>>>>>>>>	
<<<<<<<< .../inlined_temp_script_subx.baf
IF
	Disarmed([ANYONE])
THEN
	RESPONSE #100
		SetGlobal("%trap_name%","MYAREA",-1)
END
>>>>>>>>
<<<<<<<< .../inlined_temp_script_sub3.baf
IF
	Disarmed([ANYONE])
	!CheckStatLT(LastTrigger,%remove%,TRAPS)
THEN
	RESPONSE #100
		GiveItemCreate("%itm%",LastTrigger,1,0,0)
		SetGlobal("%trap_name%","MYAREA",-1)
END
IF
	Disarmed([ANYONE])
	CheckStatLT(LastTrigger,%remove%,TRAPS)
THEN
	RESPONSE #100
		SetGlobal("%trap_name%","MYAREA",-1)
END
>>>>>>>>
			DEFINE_PATCH_FUNCTION	GET_AREA_TRAPS	INT_VAR	section	= 0	RET	idx	RET_ARRAY	trap	itemTrap	trapPRO BEGIN
				SET	$trap(~?~) = 1	SET	$itemTrap(~?~) = 1	SET	$trapPRO(~?~) = 1	
				PATCH_MATCH	section	WITH
					0	BEGIN	TEXT_SPRINT	sec_name ~Container~
						SET	struct_num = 0x5a	SET	struct_off = 0x5c	SET	struct_size = 0xc4	SET	type_off = 0x20		SET	hidden_off = 0x60
						SET	detect_off = 0x68	SET	remove_off = 0x6a	SET	trapped_off = 0x6c	SET	script_off = 0x7c	SET	flagged_off = 0x60	SET	reset_band = 2
						TEXT_SPRINT	match_trigger ~TR%LNL%76 0 0 0 0 "" "" OB~	//	Entered()
					END
					1	BEGIN	TEXT_SPRINT	sec_name ~Region~
						SET	struct_num = 0x74	SET	struct_off = 0x70	SET	struct_size = 0xc0	SET	type_off = 0			SET	hidden_off = 0
						SET	detect_off = 0x2c	SET	remove_off = 0x2e	SET	trapped_off = 0x30	SET	script_off = 0x48	SET	flagged_off = 0x28	SET	reset_band = 8
						TEXT_SPRINT	match_trigger ~TR%LNL%82 0 0 0 0 "" "" OB~	//	Opened()
					END
					2	BEGIN	TEXT_SPRINT	sec_name ~Door~
						SET	struct_num = 0xa4	SET	struct_off = 0xa8	SET	struct_size = 0xc8	SET	type_off = 0			SET	hidden_off = 0x28
						SET	detect_off = 0x6c	SET	remove_off = 0x6e	SET	trapped_off = 0x70	SET	script_off = 0x80	SET	flagged_off = 0x28	SET	reset_band = 4
						TEXT_SPRINT	match_trigger ~TR%LNL%82 0 0 0 0 "" "" OB~	//	Opened()
					END
					DEFAULT
						struct_num = 0
				END
				PATCH_IF	struct_num	BEGIN
					READ_SHORT	struct_num	struct_num
					READ_LONG		struct_off	struct_off
					FOR	(i = 0; i < struct_num; ++i)	BEGIN
						PATCH_IF	type_off	BEGIN		READ_BYTE	(struct_off + i * struct_size + type_off)	type	END	ELSE	BEGIN	SET	type = 0	END
						PATCH_IF	type = 0	BEGIN
							READ_ASCII	(struct_off + i * struct_size)	trap_name (0x20) NULL
							INNER_PATCH_SAVE	trap_name	~%trap_name%~	BEGIN	REPLACE_TEXTUALLY	~ ~ ~_~ END
							PATCH_IF	hidden_off	BEGIN		READ_LONG		(struct_off + i * struct_size + hidden_off)	hidden	END	ELSE	BEGIN	SET	hidden = 8	END
							READ_LONG		(struct_off + i * struct_size + flagged_off)	flags
							READ_SHORT	(struct_off + i * struct_size + detect_off)	detect	SET	lore = detect / 2
							READ_SHORT	(struct_off + i * struct_size + remove_off)	remove 	SET	remove = remove * 5 / 4
							READ_SHORT	(struct_off + i * struct_size + trapped_off)	trapped
							READ_ASCII	(struct_off + i * struct_size + script_off)	script
							PATCH_IF	(hidden BAND 8) = 8 AND (detect < 100) AND (trapped = 1)	AND (FILE_EXISTS_IN_GAME	~%script%.bcs~)	BEGIN	//	Trap Detectable and exists
								PATCH_IF (flags BAND reset_band) > 0	BEGIN	//	Trap Resets
									SET	reset = 1
								END	ELSE	BEGIN
									WRITE_LONG	(struct_off + i * struct_size + flagged_off)	(THIS BOR reset_band)
									SET	reset = 0
								END
								PATCH_IF	FILE_CONTAINS_EVALUATED	(EVAL ~%script%.bcs~	~%match_trigger%~)	BEGIN
									PATCH_IF	!VARIABLE_IS_SET	$trap(~%section%~ ~%detect%~ ~%remove%~ ~%reset%~ ~%script%~)	BEGIN
										LPF	GET_UNIQUE_FILE_NAME	STR_VAR	extension = ~bcs~	base = EVAL ~Trap_Overhaul_%sec_name%_%area_name%_%trap_name%~	RET bcs = filename	END
										TEXT_SPRINT	$trap(~%section%~ ~%detect%~ ~%remove%~ ~%reset%~ ~%script%~) ~%bcs%~
										INNER_ACTION	BEGIN
											COPY_EXISTING	~%script%.bcs~	~override\%bcs%.bcs~
												DECOMPILE_AND_PATCH	BEGIN
													PATCH_IF	sub1 = 1 AND section = 0	BEGIN
														REFACTOR_TRIGGER	~Entered(\[ANYONE\])~
														~	Entered([ANYONE])
															OR(2)
																CheckStatLT(LastTrigger,%detect%,TRAPS)
																!Class(LastTrigger,MONK)
														~
														/*
															OR(3)
																!TriggerOverride(LastTrigger,ModalState(DETECTTRAPS))
																CheckStatLT(LastTrigger,%detect%,TRAPS)
																!Class(LastTrigger,MONK)
														*/	
													END
													PATCH_IF	reset	= 0 BEGIN
														REPLACE_TEXTUALLY	~[ %TAB%%WNL%]END[ %TAB%%WNL%$]~	~RemoveTraps(Myself)%WNL%SetGlobal("%trap_name%","MYAREA",-1)%WNL%END%WNL%~
													END
													SET	spell = INDEX_BUFFER
														(CASE_SENSITIVE	~[ %TAB%^]\(Spell\|ForceSpell\|ReallyForceSpell\|ApplySpell\|SpellNoDec\|ReallyForceSpellDead\)\(Point\)? ?(.+,~)
													PATCH_IF	spell != ~-1~	BEGIN
														SET	start	= INDEX_BUFFER	( ~,~ spell)
														PATCH_IF	start != ~-1~	BEGIN
															SET	end	= INDEX_BUFFER	( ~)~ start)
															PATCH_IF	end != ~-1~	BEGIN
																READ_ASCII	(start + 1) label (end - start - 1)
																PATCH_IF	FILE_CONTAINS_EVALUATED (~SPELL.IDS~	~[ %TAB%]%label%[ %TAB%%WNL%%MNL%%LNL%$]~)	BEGIN
																	LPF	RES_NUM_OF_SPELL_NAME	STR_VAR	spell_name = EVAL ~%label%~	RET	spell_res	END	TO_UPPER	spell_res
																END
															END
														END
													END	ELSE	BEGIN
														SET	spell = INDEX_BUFFER
															(CASE_SENSITIVE	~[ %TAB%^]\(Spell\|ForceSpell\|ReallyForceSpell\|ApplySpell\|SpellNoDec\|ReallyForceSpellDead\)[\(Point\)]?RES ?(~)
														PATCH_IF	spell != ~-1~	BEGIN
															SET	start	= INDEX_BUFFER	( ~(~ spell)
															PATCH_IF	start != ~-1~	BEGIN
																SET	end	= INDEX_BUFFER	( ~,~ start)
																PATCH_IF	end != ~-1~	BEGIN
																	READ_ASCII	(start + 1) label (end - start - 1)
																	INNER_PATCH_SAVE	spell_res	~%label%~	BEGIN	REPLACE_TEXTUALLY	~"~	~~	END	TO_UPPER	spell_res
																END
															END
														END
													END
												END
											//
											ACTION_IF	spell != ~-1~ BEGIN
												ACTION_IF	FILE_EXISTS_IN_GAME	~%spell_res%.spl~	BEGIN
													ACTION_IF sub3 = 1	BEGIN
														ACTION_IF	!VARIABLE_IS_SET	$itemTrap(~%spell_res%~)	BEGIN
															LAF	GET_UNIQUE_FILE_NAME	STR_VAR	extension = ~itm~	base = EVAL ~Recoverable_Trap_%spell_res%~	RET itm = filename	END
															LAF	GET_UNIQUE_FILE_NAME	STR_VAR	extension = ~spl~	base = EVAL ~Recoverable_Trap_%spell_res%~	RET spl = filename	END
															LAF	GET_UNIQUE_FILE_NAME	STR_VAR	extension = ~pro~	base = EVAL ~Recoverable_Trap_%spell_res%~	RET pro = filename	END
														END	ELSE	BEGIN
															OUTER_SPRINT	itm $itemTrap(~%spell_res%~)
														END
													END
													OUTER_PATCH	~%spell_res%~	BEGIN
														READ_ASCII	0	res	ELSE	~~ (4)
														READ_ASCII	4 id	ELSE	~~	(3)
														PATCH_MATCH	id	WITH
															984 989 WHEN ~%res%~ STRING_EQUAL ~SPPR~ AND GAME_IS ~iwdee~	BEGIN	//	IWDEE versions
																SET	name = id * 10 + 10002	SET	desc = name + 1
															END
															901	982	983 984 985 986 987 988 989	WHEN ~%res%~ STRING_EQUAL ~SPPR~ BEGIN
																SET	name = id * 10 + 10000	SET	desc = name + 1
															END
															06 09 12 13 18 28 29 30 31 32 33 34 35 WHEN ~%res%~ STRING_EQUAL ~SPWI~ AND GAME_IS ~iwdee~	BEGIN	//	IWDEE versions
																SET	name = id * 10 + 20002	SET	desc = name + 1
															END
															00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 934 950 AND (~%res%~ STRING_EQUAL ~SPWI~)	BEGIN
																SET	name = id * 10 + 20000	SET	desc = name + 1
															END
															683 706	707 708 709 865	WHEN ~%res%~ STRING_EQUAL ~SPIN~ BEGIN
																SET	name = id * 10 + 30000	SET	desc = name + 1
															END
														DEFAULT
															INNER_ACTION	BEGIN
																OUTER_SET	name = 1001	OUTER_SET	desc = 1002
																COPY_EXISTING	~%spell_res%.spl~	override
																	READ_STRREF NAME1 name_ref	ELSE ~%unknown%~
																	READ_STRREF UNIDENTIFIED_DESC desc_ref	ELSE ~~
																	PATCH_IF	~%name_ref%~ STRING_EQUAL ~<Invalid Strref -1>~	BEGIN	TEXT_SPRINT	name_ref ~%unknown%~	END
																	PATCH_IF	~%desc_ref%~ STRING_EQUAL ~<Invalid Strref -1>~	BEGIN	TEXT_SPRINT	desc_ref ~~	END
																BUT_ONLY
															END
														END
														SET	name = RESOLVE_STR_REF ((AT name))
														SET	desc = RESOLVE_STR_REF ((AT desc))
													END
													ACTION_IF	sub2 = 1	BEGIN
														EXTEND_TOP ~%bcs%.bcs~ ~.../inlined_temp_script_sub2.baf~ EVAL
														ACTION_IF	sub3 = 0 BEGIN
															EXTEND_TOP ~%bcs%.bcs~ ~.../inlined_temp_script_subx.baf~ EVAL
														END
													END
													ACTION_IF sub3 = 1	BEGIN
														ACTION_IF	sub2 = 0	BEGIN
															EXTEND_TOP ~%bcs%.bcs~ ~.../inlined_temp_script_subx.baf~ EVAL
														END
														EXTEND_TOP ~%bcs%.bcs~ ~.../inlined_temp_script_sub3.baf~ EVAL
														COPY_EXISTING	~%spell_res%.spl~	override	READ_SHORT	0x98	proj	BUT_ONLY
														ACTION_MATCH	proj	WITH	81 82 83 84 85 86 87 88 89 90 91	BEGIN	OUTER_SET	proj = 23	END	DEFAULT	END
														ACTION_IF	!VARIABLE_IS_SET	$itemTrap(~%spell_res%~)	BEGIN
															OUTER_SPRINT	$itemTrap(~%spell_res%~)	~%itm%~
															ACTION_IF	!VARIABLE_IS_SET	$trapPRO(~%proj%~)	BEGIN
																OUTER_SET	 miss = idx + 1
																ACTION_GET_STRREF name missile_label
																APPEND	~MISSILE.IDS~	~%miss% %missile_label%~
																APPEND	~PROJECTL.IDS~	~%idx% %pro%~
																COPY_EXISTING	~%MOD_FOLDER%\TRAP.pro~	~override\%pro%.pro~	WRITE_SHORT	0x21a	proj
																OUTER_SET	idx += 1
																OUTER_SET	$trapPRO(~%proj%~) = miss
															END	ELSE	BEGIN
																OUTER_SET	miss = $trapPRO(~%proj%~)
															END
															COPY	~%MOD_FOLDER%\TRAP.ITM~	~override\%itm%.itm~
																SAY	NAME1	@1000	WRITE_LONG	NAME2	name	SAY	DESC	@1004	WRITE_LONG	IDENTIFIED_DESC	desc
																LPF	ADD_ITEM_EFFECT	INT_VAR	type = 1	opcode = 252	target = 1	parameter2 = 1	STR_VAR	resource = EVAL ~%spl%~	END
																LPF	ADD_ITEM_EFFECT	INT_VAR	type = 1	opcode = 215	target = 1	parameter2 = 2	timing = 1	STR_VAR	resource = ~SPTRAPBB~	END
															//
															COPY_EXISTING	~%spell_res%.SPL~	~override\%spl%.spl~
																WRITE_LONG	NAME1	~-1~	WRITE_LONG	UNIDENTIFIED_DESC	~-1~	WRITE_SHORT	0x1c	4
																LPF	ALTER_SPELL_HEADER	INT_VAR	projectile = miss	END
																LPF	CLONE_EFFECT	INT_VAR	silent = 1	match_opcode = 321	STR_VAR	match_resource = EVAL ~%spell_res%~	resource = EVAL ~%spl%~	END
																LPF	CLONE_EFFECT	INT_VAR	silent = 1	match_opcode = 206	STR_VAR	match_resource = EVAL ~%spell_res%~	resource = EVAL ~%spl%~	END
																LPF	ALTER_EFFECT	INT_VAR	silent = 1	match_opcode = 318	STR_VAR	match_resource = EVAL ~%spell_res%~	resource = EVAL ~%spl%~	END
																LPF	ALTER_EFFECT	INT_VAR	silent = 1	match_opcode = 324	STR_VAR	match_resource = EVAL ~%spell_res%~	resource = EVAL ~%spl%~	END
															//
															COPY_EXISTING	~%spell_res%.SPL~	~override\%spl%F.spl~
																WRITE_LONG	NAME1	~-1~	WRITE_LONG	UNIDENTIFIED_DESC	~-1~	WRITE_SHORT	0x1c	4
																LPF	CLONE_EFFECT	INT_VAR	silent = 1	match_opcode = 321	STR_VAR	match_resource = EVAL ~%spell_res%~	resource = EVAL ~%spl%F~	END
																LPF	CLONE_EFFECT	INT_VAR	silent = 1	match_opcode = 206	STR_VAR	match_resource = EVAL ~%spell_res%~	resource = EVAL ~%spl%F~	END
																LPF	ALTER_EFFECT	INT_VAR	silent = 1	match_opcode = 318	STR_VAR	match_resource = EVAL ~%spell_res%~	resource = EVAL ~%spl%F~	END
																LPF	ALTER_EFFECT	INT_VAR	silent = 1	match_opcode = 324	STR_VAR	match_resource = EVAL ~%spell_res%~	resource = EVAL ~%spl%F~	END
															//
														END
													END
												END
											END
										END
									END
								END
								WRITE_ASCIIE	(struct_off + i * struct_size + script_off)	$trap(~%section%~ ~%detect%~ ~%remove%~ ~%reset%~ ~%script%~) #8
							END
						END
					END
				END
			END
			OUTER_SPRINT	unknown @1003
			COPY_EXISTING_REGEXP	~^.+\.ARE$~	override
				TEXT_SPRINT	area_name	~%SOURCE_RES%~
				FOR	(section = 0; section < 3; ++section)	BEGIN
					LPF	GET_AREA_TRAPS	INT_VAR	section	RET	idx	RET_ARRAY	trap	itemTrap	trapPRO	END
				END
			BUT_ONLY
			COPY_EXISTING	~BEDCLICK.BCS~	override
				REPLACE_TEXTUALLY	~"AR0502bed"~ ~"AR0502BED_CLICK"~	//	Conflicting Script name shared by Container and Info Trigger
			BUT_ONLY	IF_EXISTS
		END
	END
	LANGUAGE ~English~  ~English~	~%MOD_FOLDER%\en_US.tra~
	BEGIN	~Monk Trap Evasion, Fast Trap Detection, Trap Recovery~	DESIGNATED	111	LABEL	~TRAP_OVERHAUL_MONK_FAST_RECOVERY~
		SUBCOMPONENT	~Trap Overhaul~	LAF	MAIN	INT_VAR	sub1 = 1	sub2 = 1	sub3 = 1	END
	BEGIN	~Monk Trap Evasion, Fast Trap Detection~								DESIGNATED	110	LABEL	~TRAP_OVERHAUL_MONK_FAST~
		SUBCOMPONENT	~Trap Overhaul~	LAF	MAIN	INT_VAR	sub1 = 1	sub2 = 1	sub3 = 0	END
	BEGIN	~Monk Trap Evasion, Trap Recovery~											DESIGNATED	101	LABEL	~TRAP_OVERHAUL_MONK_RECOVERY~
		SUBCOMPONENT	~Trap Overhaul~	LAF	MAIN	INT_VAR	sub1 = 1	sub2 = 0	sub3 = 1	END
	BEGIN	~Fast Trap Detection, Trap Recovery~										DESIGNATED	011	LABEL	~TRAP_OVERHAUL_FAST_RECOVERY~
		SUBCOMPONENT	~Trap Overhaul~	LAF	MAIN	INT_VAR	sub1 = 0	sub2 = 1	sub3 = 1	END
	BEGIN	~Monk Trap Evasion~																			DESIGNATED	100	LABEL	~TRAP_OVERHAUL_MONK~
		SUBCOMPONENT	~Trap Overhaul~	LAF	MAIN	INT_VAR	sub1 = 1	sub2 = 0	sub3 = 0	END
	BEGIN	~Fast Trap Detection~																		DESIGNATED	010	LABEL	~TRAP_OVERHAUL_FAST~
		SUBCOMPONENT	~Trap Overhaul~	LAF	MAIN	INT_VAR	sub1 = 0	sub2 = 1	sub3 = 0	END
	BEGIN	~Trap Recovery~																					DESIGNATED	001	LABEL	~TRAP_OVERHAUL_RECOVERY~
		SUBCOMPONENT	~Trap Overhaul~	LAF	MAIN	INT_VAR	sub1 = 0	sub2 = 0	sub3 = 1	END
		